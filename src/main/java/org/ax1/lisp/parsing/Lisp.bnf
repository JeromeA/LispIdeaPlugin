{
  generate = [java="8"]
  parserClass="org.ax1.lisp.parsing.LispParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lisp"
  psiImplClassSuffix="Impl"
  psiPackage="org.ax1.lisp.psi"
  psiImplPackage="org.ax1.lisp.psi.impl"

  elementTypeHolderClass="org.ax1.lisp.psi.LispTypes"
  elementTypeClass="org.ax1.lisp.psi.LispElementType"
  tokenTypeClass="org.ax1.lisp.psi.LispTokenType"

  implements("sexp")="org.ax1.lisp.psi.impl.LispSexpMixin"
  mixin("sexp")="org.ax1.lisp.psi.impl.LispSexpMixinImpl"

  implements("list")="org.ax1.lisp.psi.impl.LispListMixin"
  mixin("list")="org.ax1.lisp.psi.impl.LispListMixinImpl"

  implements("symbol_name")="org.ax1.lisp.psi.impl.LispStringDesignator"
  mixin("symbol_name")="org.ax1.lisp.psi.impl.LispStringDesignatorImpl"
  implements("package_prefix")="org.ax1.lisp.psi.impl.LispStringDesignator"
  mixin("package_prefix")="org.ax1.lisp.psi.impl.LispStringDesignatorImpl"
  implements("string_content")="org.ax1.lisp.psi.impl.LispStringDesignator"
  mixin("string_content")="org.ax1.lisp.psi.impl.LispStringDesignatorImpl"

}

lispFile ::= topLevelUnit_*

private topLevelUnit_ ::= syntaxUnit_ | invalidClose
private syntaxUnit_ ::= COMMENT | prefixed_sexp
prefixed_sexp ::= prefix? sexp
prefix ::= reader_feature+ | reader_prefix | SHARP_UNSUPPORTED

reader_prefix ::= SHARP_PREFIX
reader_feature ::= SHARP_PLUS (simple_feature_exp | compound_feature_exp)
simple_feature_exp ::= symbol_name
compound_feature_exp ::= LPAREN symbol_name* RPAREN

sexp ::= string | NUMBER | CHARACTER | symbol | list | quoted
string ::= STRING_QUOTE string_content STRING_QUOTE
string_content ::= STRING_CONTENT_TOKEN?
list ::= LPAREN syntaxUnit_* RPAREN?
symbol ::= (package_prefix? colon)? symbol_name
colon ::= COLON_TOKEN
package_prefix ::= PACKAGE_TOKEN
symbol_name ::= SYMBOL_TOKEN
invalidClose ::= RPAREN
quoted ::= QUOTE sexp
